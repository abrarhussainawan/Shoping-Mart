import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:shoping_mart/screens/login_page.dart';
import 'package:shoping_mart/widgets/custom_btn.dart';
import 'package:shoping_mart/widgets/custom_input.dart';

import '../constants.dart';

class RegisterPage extends StatefulWidget {
  const RegisterPage({Key? key}) : super(key: key);

  @override
  State<RegisterPage> createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {

  Future<void> _alertDialogBulider(String error) async{
    return showDialog(
      context: context,
      builder: (context){
        return AlertDialog(
          title: Text("Error"),
          content: Container(
            child: Text(error),
          ),
          actions: [
             TextButton(
               child: Text("close Dialog"),
               onPressed: (){
                 Navigator.pop(context);
               },
           )
          ],
        );
      },

    );
  }
// create a new user account
  Future<String?> _createAccount() async{
    try {
      await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: _registerEmail, password: _registerPassword);
      return null;
    } on FirebaseAuthException catch(e) {
      if(e.code == 'weak password'){
        return 'password provided is to weak.';
      }else if(e.code =='email-already-in-use'){
        return 'This Account already exist for that email';
      }
      return e.message;
    } catch(e){
      return e.toString();

    }
  }

  void _submitForm() async{
    setState(() {
      _registerFoarmLoading = true;
    });

    String? _createAccountFeedback = await _createAccount();
    if(_createAccountFeedback !=null){
      _alertDialogBulider(_createAccountFeedback);

      setState(() {
        _registerFoarmLoading = false;
      });
    }else{
      Navigator.pop(context);
    }
  }

  bool _registerFoarmLoading = false;
  String _registerEmail = "";
  String _registerPassword = "";
  late FocusNode _passwordFocusNode;
  @override
  void initState() {
    _passwordFocusNode = FocusNode();
    super.initState();
  }
  @override
  void dispose() {
    _passwordFocusNode.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Container(
            width: double.infinity,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  padding: EdgeInsets.only(
                    top: 50.0,
                  ),
                  child: Text("Create New Account",
                    textAlign:TextAlign.center,
                    style: Constants.boldHeading,
                  ),
                ),
                Column(
                  children: [
                    CustomInput(
                      hintText: "Email",
                      onChanged: (value){
                        _registerEmail = value;
                      },
                      onSubmitted: (value){
                        _passwordFocusNode.requestFocus();
                      },
                      textInputAction: TextInputAction.next,
                    ),
                    CustomInput(
                      hintText: "Password",
                      onChanged: (value){
                        _registerPassword = value;
                      },
                      focusedNode: _passwordFocusNode,
                      isPasswordsField: true,
                      onSubmitted: (value){
                        _submitForm();
                      },
                    ),
                    CustomBtn(
                      text: "Register",
                      onPressed: (){
                      _submitForm();
                      },
                      isloading: _registerFoarmLoading,
                      outlineBtn: false,
                    ),

                  ],
                ),

                Padding(
                  padding: const EdgeInsets.only(
                    bottom: 16,
                  ),
                  child: CustomBtn(
                    text: "Back to Login",
                    onPressed: (){
                        Navigator.pop(context);

                      },
                    isloading: false,
                      outlineBtn: true,

                  ),
                ),

              ],
            )
        ),
      ),
    );
  }
}

